using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;



<PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="7.0.0-alpha.1" />



 public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(action => {  action.ReturnHttpNotAcceptable = true;}).AddFluentValidation (cfg => cfg.RegisterValidatorsFromAssemblyContaining<Create>())    
                // .AddXmlDataContractSerializerFormatters()
                .AddNewtonsoftJson()
                .AddJsonOptions(opts => opts.JsonSerializerOptions.PropertyNamingPolicy = null);

            //string connectionString = "Server=.\\sqlexpress19;Database=audit;User Id=sa;Password=orfisDev$13; encrypt=false";            
            string mycnnxString = "Server=localhost;User ID=root;Password=W3st3rn;Database=audit";

            services.AddDbContext<MyContext>(o => {            
                // o.UseSqlServer(connectionString);                
                o.UseMySql(mycnnxString, new MySqlServerVersion(new Version()));
            });


            

            services.AddCors(opt => {
                opt.AddPolicy("CorsPolicy", 
                policy => {
                    policy
                        .WithOrigins(_configuration["CorsAllow:port"])
                        .AllowAnyHeader()
                        .AllowAnyMethod();
                        
                }
                );
            });
 

......



namespace sigmaAuditor.Context
{
    
    public class MyContext: DbContext
    {

        public MyContext(DbContextOptions<MyContext> options): base(options)
        {

            try{

                    var databaseCreator =Database.GetService<IDatabaseCreator>() as RelationalDatabaseCreator;

                    if (databaseCreator != null) {
                        if (!databaseCreator.CanConnect()) databaseCreator.Create();

                        //if (!databaseCreator.HasTables())  databaseCreator.CreateTables();
                    }
                
            }catch(Exception ex ){
                Console.WriteLine(ex.Message);
            }
            
        }

        public DbSet<Sistema> Sistemas { get; set; }
        public DbSet<Modulo> Modulos { get; set; }
        

      
 
        
    }
}

---------------------------------


    const [showEnte, setShowEnte] = useState(true)
    const [showOrigen, setShowOrigen] = useState(true)
    const [showCRI, setShowCRI] = useState(true)
    const [showTotal, setShowTotal] = useState(true)
    const [showMeses, setShowMeses] = useState(true)




  <Row>
            <Col sm={3}>
                <Icon size='large'
                    name='angle double down'
                    onClick={ () => setShowCheckboxes(!showCheckboxes)} 
                >
                    Columnas
                </Icon>                
            </Col>            
        </Row>
        <br />
 
        {
            showCheckboxes
                ? (
                    <Row>
                        <Col sm={3}> 
                            <Checkbox toggle
                                label='Ente'
                                onChange={(e, data: any) => {setShowEnte(data.checked)}}                    
                                checked={showEnte}
                                />
                            <Divider />
                            <Checkbox toggle
                                label='Origen'
                                onChange={(e, data: any) => {setShowOrigen(data.checked)}}                    
                                checked={showOrigen}
                                />
                            <Divider />
                            <Checkbox toggle
                                label='CRI'
                                onChange={(e, data: any) => {setShowCRI(data.checked)}}                    
                                checked={showCRI}
                                />
                            <Divider />
                            <Checkbox toggle
                                label='Total'
                                onChange={(e, data: any) => {setShowTotal(data.checked)}}                    
                                checked={showTotal}
                                />
                            <Divider />
                            <Checkbox toggle
                                label='Meses'
                                onChange={(e, data: any) => {setShowMeses(data.checked)}}                    
                                checked={showMeses}
                                />
                        
                        </Col>
                    </Row>
                )
                : null
        }






***********************


const Menu = () => {

    const [token, setToken] = useState<string|null>(null)

    useEffect(() => {
      
        let token = sessionStorage.getItem("tokenid")
    
        setToken(token)
      
    }, [])
    

    const removeSSS = () => {
        sessionStorage.removeItem("tokenid")
        setToken(null)
      }

      const loadSSS = () => {
        sessionStorage.setItem("tokenid","inthened")
      }