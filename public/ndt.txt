appsetting


  "connectionStrings": {
     "cnnx": "Data source=user_control_db.db",     
     "xxx":"Server=SRVBD;Database=controldeusuarios;User Id=usr_controlusuarios;Password=U5u@ri0s2023; encrypt=false",
     "zzzz": "Server=.\\sqlexpress19;Database=fullcontrol;User Id=sa;Password=orfisDev$13; encrypt=false",
     "cnnxSqlServer": "Server=10.0.230.82;Database=AuditoriaSigmaver2023T2;User Id=sa;Password=+Y^n9Uj+[S; encrypt=false"
  },
  


startup

 public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(action => {  action.ReturnHttpNotAcceptable = true;}).AddFluentValidation (cfg => cfg.RegisterValidatorsFromAssemblyContaining<Create>())    
                // .AddXmlDataContractSerializerFormatters()
                .AddNewtonsoftJson()
                .AddJsonOptions(opts => opts.JsonSerializerOptions.PropertyNamingPolicy = null);

            string connectionString = "Server=.\\sqlexpress19;Database=audit;User Id=sa;Password=orfisDev$13; encrypt=false";            
            //string mycnnxString = "Server=localhost;User ID=root;Password=W3st3rn;Database=audit";

            services.AddDbContext<MyContext>(o => {            
                 o.UseSqlServer(connectionString);                
                //o.UseMySql(mycnnxString, new MySqlServerVersion(new Version()));
            });


            

            services.AddCors(opt => {
                opt.AddPolicy("CorsPolicy", 
                policy => {
                    policy
                        .WithOrigins(_configuration["CorsAllow:port"])
                        .AllowAnyHeader()
                        .AllowAnyMethod();
                        
                }
                );
            });



mycontext
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage;
using sigmaAuditor.Context;
using sigmaAuditor.Entities;


namespace sigmaAuditor.Context
{
    
    public class MyContext: DbContext
    {

        public MyContext(DbContextOptions<MyContext> options): base(options)
        {

            try{

                    var databaseCreator =Database.GetService<IDatabaseCreator>() as RelationalDatabaseCreator;

                    if (databaseCreator != null) {
                        if (!databaseCreator.CanConnect()) databaseCreator.Create();

                        //if (!databaseCreator.HasTables())  databaseCreator.CreateTables();
                    }
                
            }catch(Exception ex ){
                Console.WriteLine(ex.Message);
            }
            
        }

        public DbSet<Sistema> Sistemas { get; set; }
        public DbSet<Modulo> Modulos { get; set; }
        public DbSet<Usuario> Usuarios { get; set; }
        

      
 
        
    }
}


https://developer.android.com/codelabs/jetpack-compose-layouts?hl=es-419&continue=https%3A%2F%2Fdeveloper.android.com%2Fcourses%2Fpathways%2Fcompose%3Fhl%3Des-419%23codelab-https%3A%2F%2Fdeveloper.android.com%2Fcodelabs%2Fjetpack-compose-layouts#0



login



import React from 'react'
import { useState, useEffect} from 'react';
import agent from '../../api/agent';
import { Button, Container, Divider, Form, Segment } from 'semantic-ui-react';
import { Navigate } from 'react-router-dom';
import { useNavigate } from "react-router-dom";



const Login = () => {
    const [usuario, setUsuario] = useState('')
    const [pass, setPass] = useState('')

    const navigate   = useNavigate();

    const handleSubmit = ():void => {
        agent.BancoDeDatos.usuariosActive(usuario, pass).then ((data) =>{            

            if (data.login == 'NotFound'){                
                alert('El usuario y contrase;a no coinciden')
            }else{
                
                sessionStorage.setItem("tokenid", data.nombre)
                sessionStorage.setItem("activeuser", usuario)
                setUsuario('')
                setPass('')
                navigate("/");
                window.location.reload();

                
            }
        })
    }
  
 
    return (
        <Container>



            <Segment >
                <Form >
                    
                    <Form.Input fluid label='Usuario' placeholder='Capture el nombre de usuario' onChange={(e) => setUsuario(e.target.value)} />
                    <br />
                    <Form.Input fluid label='Constraseña' type='password' placeholder='introduzca su Contraseña' onChange={(e) => { setPass(e.target.value)}} />
                    <br />
                
                <Button type='submit' onClick={handleSubmit}>Entrar</Button>
                </Form>

            </Segment>    
                
            
           
                



        </Container>
    )

}


export default Login;







index




const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  
    <BrowserRouter>
      <Menu />
      <br></br>
      <App />
    </BrowserRouter>

 
);







menu

import { useEffect, useState } from 'react'
import { Container, Nav, Navbar, NavDropdown } from 'react-bootstrap'
import Opciones, { IOpcion } from './Opciones'
import agent from '../../api/agent';
import { IModulos } from '../../interfaces/ControlUsuarios/IModulos';

const Menu = () => {

    const [token, setToken] = useState<string|null>(null)
 
    
    

    const [opcionesLeyIngresos, setOpcionesLeyIngresos] = useState<IOpcion[]>([]);
    const [opcionesPresupuestoEgresos, setOpcionesPresupuestoEgresos] = useState<IOpcion[]>([]);
    
    const [opcionesBancos, setOpcionesBancos] = useState<IOpcion[]>([]);
    const [opcionesCuentasPorCobrar, setOpcionesCuentasPorCobrar] = useState<IOpcion[]>([]);
    const [opcionesIngresosEgresos, setOpcionesIngresosEgresos] = useState<IOpcion[]>([]);
    const [opcionesFondosObtenidos, setOpcionesFondosObtenidos] = useState<IOpcion[]>([]);
    
    const [opcionesAuditoriaObras, setOpcionesAuditoriaObras] = useState<IOpcion[]>([]);
    const [opcionesEvaluacion, setOpcionesEvaluacion] = useState<IOpcion[]>([]);
    const [opcionesCedulas, setOpcionesCedulas] = useState<IOpcion[]>([]);
    const [opcionesCedulasASF, setOpcionesCedulasASF] = useState<IOpcion[]>([]);

    useEffect(() => {      
        
        let tkn = sessionStorage.getItem("tokenid")    
        setToken(tkn)
      
        let activeuser: String | null = sessionStorage.getItem("activeuser")            

        if (activeuser != null){

        
            agent.Sistemas.modulos(activeuser).then((response) => {                        
                
                defragmentaOpciones(response,7, setOpcionesLeyIngresos)// ley de ingresos
                defragmentaOpciones(response,8, setOpcionesPresupuestoEgresos)//presupuesto de egresos
                
                defragmentaOpciones(response,21, setOpcionesBancos)//bancos
                defragmentaOpciones(response,22, setOpcionesCuentasPorCobrar)//cuentas por cobrar            
                defragmentaOpciones(response,23, setOpcionesIngresosEgresos)//ingresos y egresos
                defragmentaOpciones(response,24, setOpcionesFondosObtenidos)//fondos obtenidos
                
                defragmentaOpciones(response,3, setOpcionesAuditoriaObras)//auditoria obras
                defragmentaOpciones(response,4, setOpcionesEvaluacion)//evaluacion
                defragmentaOpciones(response,5, setOpcionesCedulas)//cedulas
                defragmentaOpciones(response,6, setOpcionesCedulasASF)//cedulas ASF

            })
        }

        


    }, [])
    

    const defragmentaOpciones = ( registros: IModulos[], dependede: any, seter:  React.Dispatch<IOpcion[]>)  => {

        let opciones = registros
                            .filter( p => p.superId == dependede)
                            .map((q) => {
                                            return {
                                                url: q.url, 
                                                nombre: q.nombre
                                                }
                            } )

        seter(opciones)

        

    }

    const removeSSS = () => {
        sessionStorage.removeItem("tokenid")        
        sessionStorage.removeItem("activeuser")        

        setToken(null)
        window.location.reload();
      }

      const opcionesConfiguracion : IOpcion[] = [
        {url : '/accesosPorArea',nombre : 'Accesos por area'},
        {url : '/accesosPorTipo',nombre : 'Accesos por tipo usuario'},
        {url : '/usuarios',nombre : 'Usuarios'}
      ]
  
      const CargarOpcionesMenu = (titulo: string, arr: IOpcion[]) => (
                
            arr.length
                ? (
                    <>  
                        <Opciones titulo={titulo} opciones={arr} />  
                    </>
                ): null
        
      )
 
 

    return (
        <Navbar expand='lg' className='bg-body-tertiary'>
            <Container>

                <Navbar.Brand href='/'>
                    SIGMA Auditor                     
                </Navbar.Brand>
    
                <Navbar.Toggle aria-controls='responsive-navbar-nav'/>
                <Navbar.Collapse id='responsive-navbar-nav'>
                    <Nav className='me-auto'
                         style={{ maxHeight:'100px'}}
                         navbarScroll >                        
                            {
                                token == null 
                                ? ( 
                                    <>
                                        <NavDropdown.Item href='/login'>Iniciar Sesión</NavDropdown.Item>                                
                                    </>
                                    
                                )
                                : (
                                    <>
                                        {
                                            opcionesLeyIngresos.length || opcionesPresupuestoEgresos.length
                                                ? (
                                                    <NavDropdown title='Presupuesto' id='collasible-nav-dropdown'>                                        
                                                        { CargarOpcionesMenu ("Ley de Ingresos",        opcionesLeyIngresos)}
                                                        { CargarOpcionesMenu ("Presupuesto de Egresos", opcionesPresupuestoEgresos)}                                        
                                                    </NavDropdown>                                
                                                ): null
                                        }

                                        {
                                            opcionesBancos.length           ||
                                            opcionesCuentasPorCobrar.length ||
                                            opcionesIngresosEgresos.length  ||
                                            opcionesFondosObtenidos.length
                                                ? (
                                                        <NavDropdown title='Auditoria Financiera' id='collasible-nav-dropdown'>

                                                            { CargarOpcionesMenu ("Bancos",                         opcionesBancos)}
                                                            { CargarOpcionesMenu ("Cuentas por Cobrar",             opcionesCuentasPorCobrar)}
                                                            { CargarOpcionesMenu ("Ingresos y Egresos",             opcionesIngresosEgresos  )}
                                                            { CargarOpcionesMenu ("Fondos obtenidos y aplicados",   opcionesFondosObtenidos  )}
                
                                                        </NavDropdown>
                                                        
                                                ) : null


                                        }
                                        
            

            
                                        { CargarOpcionesMenu ("Auditoria Obra", opcionesAuditoriaObras)}
                                        { CargarOpcionesMenu ("Evaluación",     opcionesEvaluacion)}
                                        { CargarOpcionesMenu ("Cédulas",        opcionesCedulas  )}
                                        { CargarOpcionesMenu ("Cédulas ASF",    opcionesCedulasASF  )}
                             
                                        
                                        
                                        
                                                                                
                                        <Opciones titulo='Configuración' opciones={opcionesConfiguracion} ></Opciones>
                                        
                                        <NavDropdown  title={token} id='collasible-nav-dropdown'>                                                                        
                                            <NavDropdown.Item href='#' onClick={removeSSS}>Cerrar Sesión</NavDropdown.Item>                                    
                                        </NavDropdown>

                                </>

                                )
                            }

    
                    </Nav>
    
                </Navbar.Collapse>

         
            </Container>
        </Navbar>
    )
}

export default Menu




import { Container, Row } from 'react-bootstrap'
import logo from './logo.png'


const Home = () => {

     

    return (
            <Container>
                 <Row className="justify-content-center">
                 <img src={logo} alt="Logo" />
                </Row>
            </Container>
    
    )
}

export default Home